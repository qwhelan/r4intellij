/* The following code was generated by JFlex 1.4.3 on 8/25/18, 9:29 AM */

/* It's an automatically generated code. Do not modify it. */
package com.r4intellij.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import com.r4intellij.parsing.RElementTypes;
import com.r4intellij.parsing.RParserDefinition;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/25/18, 9:29 AM from the specification file
 * <tt>R.flex</tt>
 */
class _RLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\61\1\0\1\1\1\47\22\0\1\62\1\100\1\60"+
    "\1\46\1\37\1\112\1\35\1\56\1\101\1\102\1\34\1\32\1\107"+
    "\1\33\1\27\1\40\1\30\7\50\2\50\1\3\1\110\1\43\1\44"+
    "\1\42\1\111\1\77\1\70\3\51\1\53\1\67\2\2\1\73\2\2"+
    "\1\55\1\2\1\72\1\2\1\54\1\2\1\65\1\71\1\64\1\66"+
    "\2\2\1\52\2\2\1\105\1\57\1\106\1\36\1\13\1\31\1\16"+
    "\1\26\1\7\1\11\1\12\1\24\1\74\1\25\1\6\1\2\1\76"+
    "\1\20\1\23\1\5\1\10\1\14\1\2\1\15\1\17\1\21\1\4"+
    "\1\2\1\22\1\75\2\2\1\103\1\45\1\104\1\41\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\10\3\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\1\5\2\23"+
    "\1\24\1\25\1\26\4\3\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\1"+
    "\1\0\1\42\1\0\1\3\1\43\1\44\7\3\1\5"+
    "\1\45\1\0\1\46\2\0\1\3\1\47\1\50\1\51"+
    "\1\52\1\0\1\53\1\54\1\55\1\23\2\0\4\3"+
    "\1\56\1\3\1\57\1\60\1\61\2\0\1\62\1\63"+
    "\1\0\5\3\1\64\1\3\1\65\1\5\1\0\1\5"+
    "\1\66\1\67\2\3\1\70\2\3\1\71\2\0\1\72"+
    "\1\73\4\3\1\0\1\74\1\3\1\75\3\3\2\0"+
    "\1\3\1\76\1\3\1\77\1\0\1\100\4\3\2\0"+
    "\1\101\5\3\2\0\5\3\2\0\1\102\3\3\1\103"+
    "\2\0\3\3\6\0\3\3\7\0\1\104\1\105\1\3"+
    "\12\0\1\3\13\0\1\106\60\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2"+
    "\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\113"+
    "\0\u041a\0\113\0\u0465\0\113\0\113\0\113\0\113\0\u04b0"+
    "\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708"+
    "\0\113\0\113\0\113\0\u0753\0\u079e\0\u07e9\0\u0834\0\113"+
    "\0\u087f\0\113\0\113\0\113\0\113\0\u08ca\0\u0915\0\113"+
    "\0\113\0\113\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\226"+
    "\0\226\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99"+
    "\0\u0ce4\0\113\0\u0d2f\0\113\0\u0d7a\0\u03cf\0\113\0\u0dc5"+
    "\0\113\0\113\0\113\0\u0e10\0\113\0\113\0\113\0\113"+
    "\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u101d\0\u1068"+
    "\0\113\0\113\0\113\0\u0960\0\u10b3\0\113\0\113\0\u10fe"+
    "\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\226\0\u12c0\0\226"+
    "\0\u130b\0\u1356\0\u13a1\0\113\0\113\0\u13ec\0\u1437\0\226"+
    "\0\u1482\0\u14cd\0\226\0\u1518\0\u1563\0\226\0\226\0\u15ae"+
    "\0\u15f9\0\u1644\0\u168f\0\u16da\0\226\0\u1725\0\226\0\u1770"+
    "\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\226\0\u1932\0\226"+
    "\0\u197d\0\226\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f"+
    "\0\226\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c"+
    "\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\226"+
    "\0\u1fa4\0\u1fef\0\u203a\0\226\0\u2085\0\u20d0\0\u211b\0\u2166"+
    "\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be"+
    "\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616"+
    "\0\u2661\0\226\0\226\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8"+
    "\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30"+
    "\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88"+
    "\0\u2cd3\0\u2d1e\0\226\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95"+
    "\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed"+
    "\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345"+
    "\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d"+
    "\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d"+
    "\0\u3a98\0\u3ae3\0\u3b2e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\3\4"+
    "\1\10\1\2\1\4\1\11\4\4\1\12\1\4\1\13"+
    "\1\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\5\4\1\37\1\2\1\40"+
    "\1\41\1\42\1\43\1\44\2\4\1\45\2\4\1\46"+
    "\1\47\3\4\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\115\0\1\4"+
    "\1\64\25\4\17\0\6\4\6\0\13\4\17\0\1\65"+
    "\1\66\110\0\1\4\1\64\6\4\1\67\16\4\17\0"+
    "\6\4\6\0\13\4\16\0\1\4\1\64\1\4\1\70"+
    "\16\4\1\71\4\4\17\0\6\4\6\0\13\4\16\0"+
    "\1\4\1\64\14\4\1\72\10\4\17\0\6\4\6\0"+
    "\13\4\16\0\1\4\1\64\6\4\1\73\16\4\17\0"+
    "\6\4\6\0\13\4\16\0\1\4\1\64\21\4\1\74"+
    "\3\4\17\0\6\4\6\0\13\4\16\0\1\4\1\64"+
    "\1\75\3\4\1\76\20\4\17\0\6\4\6\0\13\4"+
    "\16\0\1\4\1\64\11\4\1\77\13\4\17\0\6\4"+
    "\6\0\13\4\16\0\1\4\1\64\23\4\1\100\1\101"+
    "\17\0\1\101\5\4\6\0\13\4\22\0\1\102\3\0"+
    "\1\103\5\0\1\104\6\0\1\101\1\36\17\0\1\36"+
    "\1\0\1\105\1\103\1\0\1\104\17\0\1\105\15\0"+
    "\31\106\1\107\61\106\42\0\1\110\105\0\1\111\121\0"+
    "\1\112\101\0\1\113\7\0\1\114\1\115\112\0\1\116"+
    "\113\0\1\117\45\0\47\34\1\0\11\34\1\0\31\34"+
    "\61\0\1\41\37\0\1\102\3\0\1\103\5\0\1\104"+
    "\6\0\1\101\1\36\17\0\1\36\2\0\1\103\1\0"+
    "\1\104\35\0\56\37\1\120\1\121\33\37\57\40\1\122"+
    "\1\120\32\40\2\0\1\4\1\64\25\4\17\0\6\4"+
    "\6\0\1\4\1\123\11\4\16\0\1\4\1\64\25\4"+
    "\17\0\6\4\6\0\4\4\1\124\6\4\16\0\1\4"+
    "\1\64\12\4\1\125\12\4\17\0\6\4\6\0\2\4"+
    "\1\126\1\4\1\127\6\4\16\0\1\4\1\64\1\4"+
    "\1\130\23\4\17\0\6\4\6\0\13\4\60\0\1\131"+
    "\153\0\1\132\113\0\1\133\6\0\1\134\1\135\7\134"+
    "\1\0\14\134\2\0\14\134\3\0\5\134\6\0\13\134"+
    "\13\0\1\136\4\0\1\66\111\0\1\137\114\0\1\140"+
    "\107\0\1\4\1\64\25\4\17\0\6\4\6\0\11\4"+
    "\1\141\1\4\16\0\1\4\1\64\13\4\1\142\11\4"+
    "\17\0\6\4\6\0\13\4\16\0\1\4\1\64\10\4"+
    "\1\143\14\4\17\0\6\4\6\0\13\4\16\0\1\4"+
    "\1\64\2\4\1\144\22\4\17\0\6\4\6\0\13\4"+
    "\16\0\1\4\1\64\1\4\1\145\23\4\17\0\6\4"+
    "\6\0\13\4\16\0\1\4\1\64\11\4\1\146\13\4"+
    "\17\0\6\4\6\0\13\4\16\0\1\4\1\64\6\4"+
    "\1\147\16\4\17\0\6\4\6\0\13\4\16\0\1\4"+
    "\1\64\23\4\1\150\1\4\17\0\6\4\6\0\13\4"+
    "\22\0\1\102\3\0\1\103\5\0\1\104\7\0\1\101"+
    "\17\0\1\101\2\0\1\103\1\0\1\104\65\0\1\151"+
    "\1\0\2\152\14\0\1\151\51\0\1\153\1\0\2\153"+
    "\3\0\1\153\5\0\1\153\1\0\1\153\1\0\1\153"+
    "\17\0\2\153\1\0\1\153\13\0\2\153\64\0\1\154"+
    "\103\0\1\155\57\0\113\37\113\40\2\0\1\4\1\64"+
    "\25\4\17\0\6\4\6\0\2\4\1\156\10\4\16\0"+
    "\1\4\1\64\25\4\17\0\5\4\1\157\6\0\13\4"+
    "\16\0\1\4\1\64\25\4\17\0\6\4\6\0\6\4"+
    "\1\160\4\4\16\0\1\4\1\64\25\4\17\0\5\4"+
    "\1\161\6\0\13\4\16\0\1\4\1\64\7\4\1\162"+
    "\15\4\17\0\6\4\6\0\13\4\16\0\1\4\1\64"+
    "\20\4\1\163\4\4\17\0\6\4\6\0\13\4\16\0"+
    "\1\134\1\135\1\164\6\134\1\0\14\134\2\0\14\134"+
    "\3\0\5\134\6\0\13\134\13\0\1\136\6\0\1\165"+
    "\106\0\1\4\1\64\15\4\1\166\7\4\17\0\6\4"+
    "\6\0\13\4\16\0\1\4\1\64\6\4\1\167\16\4"+
    "\17\0\6\4\6\0\13\4\16\0\1\4\1\64\6\4"+
    "\1\170\16\4\17\0\6\4\6\0\13\4\16\0\1\4"+
    "\1\64\14\4\1\171\10\4\17\0\6\4\6\0\13\4"+
    "\16\0\1\4\1\64\3\4\1\172\21\4\17\0\6\4"+
    "\6\0\13\4\16\0\1\4\1\64\12\4\1\173\12\4"+
    "\17\0\6\4\6\0\13\4\22\0\1\102\11\0\1\104"+
    "\7\0\1\151\17\0\1\151\4\0\1\104\65\0\1\151"+
    "\17\0\1\151\51\0\1\153\1\0\2\153\1\0\1\103"+
    "\1\0\1\153\1\0\1\104\3\0\1\153\1\0\1\153"+
    "\1\174\1\153\17\0\2\153\1\0\1\153\1\103\1\104"+
    "\11\0\2\153\24\0\1\4\1\64\25\4\17\0\3\4"+
    "\1\175\2\4\6\0\13\4\16\0\1\4\1\64\25\4"+
    "\17\0\6\4\6\0\5\4\1\176\5\4\16\0\1\4"+
    "\1\64\25\4\17\0\5\4\1\177\6\0\13\4\16\0"+
    "\1\4\1\64\2\4\1\200\1\201\5\4\1\202\13\4"+
    "\17\0\6\4\6\0\13\4\16\0\1\134\1\135\1\134"+
    "\1\203\5\134\1\0\14\134\2\0\14\134\3\0\5\134"+
    "\6\0\13\134\13\0\1\136\7\0\1\204\105\0\1\4"+
    "\1\64\12\4\1\205\12\4\17\0\6\4\6\0\13\4"+
    "\16\0\1\4\1\64\6\4\1\206\16\4\17\0\6\4"+
    "\6\0\13\4\16\0\1\4\1\64\15\4\1\207\7\4"+
    "\17\0\6\4\6\0\13\4\16\0\1\4\1\64\25\4"+
    "\17\0\6\4\6\0\12\4\1\210\44\0\1\211\17\0"+
    "\1\211\44\0\1\4\1\64\25\4\17\0\3\4\1\212"+
    "\2\4\6\0\13\4\16\0\1\4\1\64\1\4\1\213"+
    "\23\4\17\0\6\4\6\0\13\4\16\0\1\4\1\64"+
    "\4\4\1\214\14\4\1\215\3\4\17\0\6\4\6\0"+
    "\13\4\16\0\1\4\1\64\6\4\1\216\16\4\17\0"+
    "\6\4\6\0\13\4\16\0\1\134\1\135\2\134\1\217"+
    "\4\134\1\0\14\134\2\0\14\134\3\0\5\134\6\0"+
    "\13\134\13\0\1\136\10\0\1\220\104\0\1\4\1\64"+
    "\15\4\1\221\7\4\17\0\6\4\6\0\13\4\16\0"+
    "\1\4\1\64\2\4\1\222\22\4\17\0\6\4\6\0"+
    "\13\4\30\0\1\103\13\0\1\211\17\0\1\211\3\0"+
    "\1\103\40\0\1\4\1\64\15\4\1\223\7\4\17\0"+
    "\6\4\6\0\13\4\16\0\1\4\1\64\17\4\1\224"+
    "\5\4\17\0\6\4\6\0\13\4\16\0\1\4\1\64"+
    "\12\4\1\225\12\4\17\0\6\4\6\0\13\4\16\0"+
    "\1\4\1\64\12\4\1\226\12\4\17\0\6\4\6\0"+
    "\13\4\16\0\1\134\1\135\3\134\1\227\3\134\1\0"+
    "\14\134\2\0\14\134\3\0\5\134\6\0\13\134\13\0"+
    "\1\136\11\0\1\230\103\0\1\4\1\64\4\4\1\231"+
    "\20\4\17\0\6\4\6\0\13\4\16\0\1\4\1\64"+
    "\6\4\1\232\16\4\17\0\6\4\6\0\13\4\16\0"+
    "\1\4\1\64\10\4\1\233\14\4\17\0\6\4\6\0"+
    "\13\4\16\0\1\4\1\64\11\4\1\234\13\4\17\0"+
    "\6\4\6\0\13\4\16\0\1\4\1\64\14\4\1\235"+
    "\10\4\17\0\6\4\6\0\13\4\16\0\1\134\1\135"+
    "\4\134\1\236\2\134\1\0\14\134\2\0\14\134\3\0"+
    "\5\134\6\0\13\134\13\0\1\136\12\0\1\237\102\0"+
    "\1\4\1\64\1\4\1\240\23\4\17\0\6\4\6\0"+
    "\13\4\16\0\1\4\1\64\25\4\17\0\6\4\6\0"+
    "\10\4\1\241\2\4\16\0\1\4\1\64\14\4\1\242"+
    "\10\4\17\0\6\4\6\0\13\4\16\0\1\4\1\64"+
    "\12\4\1\243\12\4\17\0\6\4\6\0\13\4\16\0"+
    "\1\4\1\64\7\4\1\244\15\4\17\0\6\4\6\0"+
    "\13\4\16\0\1\134\1\135\5\134\1\245\1\134\1\0"+
    "\14\134\2\0\14\134\3\0\5\134\6\0\13\134\13\0"+
    "\1\136\13\0\1\246\101\0\1\4\1\64\6\4\1\247"+
    "\16\4\17\0\6\4\6\0\13\4\16\0\1\4\1\64"+
    "\6\4\1\250\16\4\17\0\6\4\6\0\13\4\16\0"+
    "\1\4\1\64\3\4\1\251\21\4\17\0\6\4\6\0"+
    "\13\4\16\0\1\134\1\135\6\134\1\252\1\0\14\134"+
    "\2\0\14\134\3\0\5\134\6\0\13\134\13\0\1\136"+
    "\4\0\1\253\3\0\1\254\7\0\1\255\1\256\1\0"+
    "\1\257\71\0\1\4\1\64\11\4\1\260\13\4\17\0"+
    "\6\4\6\0\13\4\16\0\1\4\1\64\25\4\17\0"+
    "\6\4\6\0\11\4\1\261\1\4\16\0\1\4\1\64"+
    "\15\4\1\262\7\4\17\0\6\4\6\0\13\4\16\0"+
    "\1\134\1\135\7\134\1\263\14\134\2\0\14\134\3\0"+
    "\5\134\6\0\13\134\13\0\1\136\14\0\1\264\117\0"+
    "\1\265\101\0\1\266\1\0\1\267\106\0\1\270\114\0"+
    "\1\271\104\0\1\4\1\64\7\4\1\272\15\4\17\0"+
    "\6\4\6\0\13\4\16\0\1\4\1\64\7\4\1\273"+
    "\15\4\17\0\6\4\6\0\13\4\16\0\1\4\1\64"+
    "\6\4\1\274\16\4\17\0\6\4\6\0\13\4\20\0"+
    "\1\275\3\0\1\276\7\0\1\277\1\300\1\0\1\301"+
    "\103\0\1\302\123\0\1\303\107\0\1\302\111\0\1\304"+
    "\112\0\1\305\102\0\1\306\103\0\1\4\1\64\11\4"+
    "\1\307\13\4\17\0\6\4\6\0\13\4\30\0\1\310"+
    "\117\0\1\311\101\0\1\312\1\0\1\313\106\0\1\314"+
    "\114\0\1\315\114\0\1\316\112\0\1\317\121\0\1\320"+
    "\111\0\1\321\100\0\1\322\106\0\1\4\1\64\7\4"+
    "\1\323\15\4\17\0\6\4\6\0\13\4\30\0\1\324"+
    "\123\0\1\325\107\0\1\324\111\0\1\326\112\0\1\327"+
    "\102\0\1\330\116\0\1\331\112\0\1\332\107\0\1\333"+
    "\112\0\1\331\124\0\1\334\100\0\1\335\112\0\1\336"+
    "\121\0\1\337\111\0\1\340\100\0\1\341\113\0\1\342"+
    "\116\0\1\343\114\0\1\344\103\0\1\303\121\0\1\345"+
    "\112\0\1\346\107\0\1\347\112\0\1\345\124\0\1\350"+
    "\104\0\1\351\114\0\1\352\105\0\1\353\106\0\1\354"+
    "\116\0\1\355\114\0\1\356\103\0\1\325\123\0\1\357"+
    "\105\0\1\360\105\0\1\361\123\0\1\362\114\0\1\363"+
    "\105\0\1\364\111\0\1\332\121\0\1\365\75\0\1\366"+
    "\125\0\1\367\105\0\1\370\105\0\1\371\126\0\1\372"+
    "\114\0\1\373\101\0\1\346\121\0\1\374\75\0\1\375"+
    "\120\0\1\376\126\0\1\372\105\0\1\377\114\0\1\u0100"+
    "\104\0\1\u0101\107\0\1\u0102\126\0\1\377\67\0\1\4"+
    "\124\0\1\u0103\100\0\1\134\107\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15225];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\14\1\1\11\1\1\1\11\1\1\4\11"+
    "\11\1\3\11\4\1\1\11\1\1\4\11\2\1\3\11"+
    "\1\1\1\0\1\1\1\0\13\1\1\11\1\0\1\11"+
    "\2\0\1\11\1\1\3\11\1\0\4\11\2\0\6\1"+
    "\3\11\2\0\2\11\1\0\11\1\1\0\1\1\2\11"+
    "\6\1\2\0\6\1\1\0\6\1\2\0\4\1\1\0"+
    "\5\1\2\0\6\1\2\0\5\1\2\0\5\1\2\0"+
    "\3\1\6\0\3\1\7\0\3\1\12\0\1\1\13\0"+
    "\1\1\60\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  private boolean zzEOFDone;

  /* user code: */
private Stack<IElementType> myExpectedBracketsStack = new Stack<IElementType>();


  _RLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _RLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { return RElementTypes.R_WHILE;
          }
        case 71: break;
        case 7: 
          { return RElementTypes.R_MINUS;
          }
        case 72: break;
        case 20: 
          { return RElementTypes.R_NL;
          }
        case 73: break;
        case 32: 
          { return RElementTypes.R_SEMI;
          }
        case 74: break;
        case 39: 
          { return RElementTypes.R_RIGHT_ASSIGN;
          }
        case 75: break;
        case 63: 
          { return RElementTypes.R_BREAK;
          }
        case 76: break;
        case 52: 
          { return RElementTypes.R_FOR;
          }
        case 77: break;
        case 27: 
          { return RElementTypes.R_LBRACE;
          }
        case 78: break;
        case 61: 
          { return RElementTypes.R_NULL;
          }
        case 79: break;
        case 44: 
          { return RElementTypes.R_EQEQ;
          }
        case 80: break;
        case 41: 
          { return RElementTypes.R_GE;
          }
        case 81: break;
        case 28: 
          { return RElementTypes.R_RBRACE;
          }
        case 82: break;
        case 49: 
          { if (myExpectedBracketsStack.isEmpty()) return RElementTypes.R_RDBRACKET;
                              final IElementType expectedBracket = myExpectedBracketsStack.pop();
                              if (expectedBracket == RElementTypes.R_RDBRACKET) {
                                return RElementTypes.R_RDBRACKET;
                              }
                              else {
                                yypushback(1);
                                return RElementTypes.R_RBRACKET;
                              }
          }
        case 83: break;
        case 40: 
          { return RElementTypes.R_ANDAND;
          }
        case 84: break;
        case 55: 
          { return RElementTypes.R_LEFT_COMPLEX_ASSIGN;
          }
        case 85: break;
        case 65: 
          { return RElementTypes.R_REPEAT;
          }
        case 86: break;
        case 14: 
          { return RElementTypes.R_GT;
          }
        case 87: break;
        case 48: 
          { myExpectedBracketsStack.add(RElementTypes.R_RDBRACKET); return RElementTypes.R_LDBRACKET;
          }
        case 88: break;
        case 11: 
          { return RElementTypes.R_LIST_SUBSET;
          }
        case 89: break;
        case 51: 
          { return RElementTypes.R_TRIPLECOLON;
          }
        case 90: break;
        case 26: 
          { return RElementTypes.R_RPAR;
          }
        case 91: break;
        case 45: 
          { return RElementTypes.R_OROR;
          }
        case 92: break;
        case 10: 
          { return RElementTypes.R_EXP;
          }
        case 93: break;
        case 56: 
          { return RElementTypes.R_NAN;
          }
        case 94: break;
        case 13: 
          { return RElementTypes.R_TILDE;
          }
        case 95: break;
        case 1: 
          { return RParserDefinition.BAD_CHARACTER;
          }
        case 96: break;
        case 2: 
          { return RParserDefinition.FORMFEED;
          }
        case 97: break;
        case 59: 
          { return RElementTypes.R_ELSE;
          }
        case 98: break;
        case 57: 
          { return RElementTypes.R_INF;
          }
        case 99: break;
        case 30: 
          { if (myExpectedBracketsStack.isEmpty()) return RElementTypes.R_RBRACKET;
                              myExpectedBracketsStack.pop();
                              return RElementTypes.R_RBRACKET;
          }
        case 100: break;
        case 16: 
          { return RElementTypes.R_EQ;
          }
        case 101: break;
        case 66: 
          { return RElementTypes.R_FUNCTION;
          }
        case 102: break;
        case 22: 
          { return RParserDefinition.TAB;
          }
        case 103: break;
        case 60: 
          { return RElementTypes.R_TRUE;
          }
        case 104: break;
        case 70: 
          { return RElementTypes.R_NA_CHARACTER;
          }
        case 105: break;
        case 50: 
          { return RElementTypes.R_INFIX_OP;
          }
        case 106: break;
        case 43: 
          { return RElementTypes.R_LE;
          }
        case 107: break;
        case 64: 
          { return RElementTypes.R_FALSE;
          }
        case 108: break;
        case 58: 
          { return RElementTypes.R_NEXT;
          }
        case 109: break;
        case 6: 
          { return RElementTypes.R_PLUS;
          }
        case 110: break;
        case 5: 
          { return RElementTypes.R_NUMERIC;
          }
        case 111: break;
        case 36: 
          { return RElementTypes.R_IF;
          }
        case 112: break;
        case 21: 
          { return RParserDefinition.SPACE;
          }
        case 113: break;
        case 31: 
          { return RElementTypes.R_COMMA;
          }
        case 114: break;
        case 3: 
          { return RElementTypes.R_IDENTIFIER;
          }
        case 115: break;
        case 46: 
          { return RElementTypes.R_NA;
          }
        case 116: break;
        case 15: 
          { return RElementTypes.R_LT;
          }
        case 117: break;
        case 12: 
          { return RElementTypes.R_DIV;
          }
        case 118: break;
        case 4: 
          { return RElementTypes.R_COLON;
          }
        case 119: break;
        case 42: 
          { return RElementTypes.R_LEFT_ASSIGN;
          }
        case 120: break;
        case 9: 
          { return RElementTypes.R_AND;
          }
        case 121: break;
        case 24: 
          { return RElementTypes.R_NOT;
          }
        case 122: break;
        case 53: 
          { return RElementTypes.R_TRIPLE_DOTS;
          }
        case 123: break;
        case 29: 
          { myExpectedBracketsStack.add(RElementTypes.R_RBRACKET); return RElementTypes.R_LBRACKET;
          }
        case 124: break;
        case 19: 
          { return RElementTypes.R_STRING;
          }
        case 125: break;
        case 8: 
          { return RElementTypes.R_MULT;
          }
        case 126: break;
        case 37: 
          { return RElementTypes.R_COMPLEX;
          }
        case 127: break;
        case 38: 
          { return RElementTypes.R_INTEGER;
          }
        case 128: break;
        case 47: 
          { return RElementTypes.R_NOTEQ;
          }
        case 129: break;
        case 18: 
          { return RParserDefinition.END_OF_LINE_COMMENT;
          }
        case 130: break;
        case 34: 
          { return RElementTypes.R_DOUBLECOLON;
          }
        case 131: break;
        case 67: 
          { return RElementTypes.R_NA_REAL;
          }
        case 132: break;
        case 33: 
          { return RElementTypes.R_HELP;
          }
        case 133: break;
        case 23: 
          { return RElementTypes.R_AT;
          }
        case 134: break;
        case 68: 
          { return RElementTypes.R_NA_INTEGER;
          }
        case 135: break;
        case 25: 
          { return RElementTypes.R_LPAR;
          }
        case 136: break;
        case 69: 
          { return RElementTypes.R_NA_COMPLEX;
          }
        case 137: break;
        case 54: 
          { return RElementTypes.R_RIGHT_COMPLEX_ASSIGN;
          }
        case 138: break;
        case 17: 
          { return RElementTypes.R_OR;
          }
        case 139: break;
        case 35: 
          { return RElementTypes.R_IN;
          }
        case 140: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
